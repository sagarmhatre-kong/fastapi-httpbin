components:
  schemas:
    Body_qrcode_post_form_qrcode_form_post:
      properties:
        border:
          title: Border
          type: integer
        box_size:
          title: Box Size
          type: integer
        transparent_background:
          default: false
          title: Transparent Background
          type: boolean
        url:
          title: Url
          type: string
      required:
      - url
      - box_size
      - border
      title: Body_qrcode_post_form_qrcode_form_post
      type: object
    Body_test_password_manager_form_test_password_manager_form_post_post:
      properties:
        password:
          title: Password
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - password
      title: Body_test_password_manager_form_test_password_manager_form_post_post
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    PersonData:
      properties:
        age:
          description: Age of the person
          maximum: 100.0
          minimum: 0.0
          title: Age
          type: integer
        name:
          description: Name of the person
          maxLength: 50
          minLength: 3
          title: Name
          type: string
      required:
      - name
      - age
      title: PersonData
      type: object
    QRCode:
      properties:
        border:
          default: 4
          exclusiveMinimum: 0.0
          maximum: 20.0
          title: Border
          type: integer
        box_size:
          default: 10
          exclusiveMinimum: 0.0
          maximum: 20.0
          title: Box Size
          type: integer
        transparent_background:
          default: false
          title: Transparent Background
          type: boolean
        url:
          maxLength: 1024
          minLength: 4
          title: Url
          type: string
      required:
      - url
      title: QRCode
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  description: "\n<a href=\"static/logo.png\"><img src=\"static/logo.png\" align=\"\
    right\" /></a>\n\nHTTP Endpoints for easy testing of your app.\n\nBuilt with the\
    \ <a href=\"https://fastapi.tiangolo.com/\">FastAPI framework</a>, \nthis is heavily\
    \ based on the original <a href=\"https://httpbin.org/\">Httpbin</a> website.\n\
    \n<a href=\"/about\">About this project</a> - \n<a href=\"/roadmap\">Development\
    \ Roadmap</a> -\n<a href=\"/qrcode/\">Dead Simple QR Code Generator</a> -\n<a\
    \ href=\"/test-password-manager-form/\">Form for testing Password Managers like\
    \ 1Password and BitWarden</a>\n<p>\n\n<a href=\"https://github.com/dmuth/fastapi-httpbin\"\
    >GitHub repo</a>\n<p>\n\nRun locally in Docker: <tt><b>docker run -p 80:80 dmuth1/fastapi-httpbin</b></tt>\n\
    \n<a href=\"https://httpbin.dmuth.org/\">Main Site</a> - Mirrors: \n<a href=\"\
    https://fly.httpbin.dmuth.org/\">Fly</a>\n<a href=\"https://railway.httpbin.dmuth.org/\"\
    >Railway</a>\n<a href=\"https://render.httpbin.dmuth.org/\">Render</a>\n\n"
  title: FastAPI Httpbin
  version: 0.0.54
openapi: 3.1.0
paths:
  /anything:
    delete:
      operationId: delete_anything_delete
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
    get:
      operationId: get_anything_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
    head:
      operationId: get_anything_head
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
    patch:
      operationId: patch_anything_patch
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
    post:
      operationId: post_anything_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonData'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
      x-kong-plugin-request-validator:
        config:
          verbose_response: true
    put:
      operationId: put_anything_put
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns anything that is passed into the request.
      tags:
      - Anything
  /cache:
    get:
      operationId: cache_cache_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Returns a 304 if an If-Modified-Since header or If-None-Match is present.
        Returns the same as a GET otherwise.
      tags:
      - Responses
  /cache/{seconds}:
    get:
      operationId: cache_seconds_cache__seconds__get
      parameters:
      - example: 3
        in: path
        name: seconds
        required: true
        schema:
          title: Seconds
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Sets a Cache-Control header for n seconds.
      tags:
      - Responses
  /cookies:
    delete:
      operationId: delete_cookies_delete
      requestBody:
        content:
          application/json:
            example: '["cookie1", "cookie2", "cookie3"]'
            schema:
              anyOf:
              - items: {}
                type: array
              - type: 'null'
              title: Cookies
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete one or more cookies.
      tags:
      - Cookies
    get:
      operationId: get_cookies_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Show current cookies in the browser.
      tags:
      - Cookies
    put:
      operationId: put_cookies_put
      requestBody:
        content:
          application/json:
            example: '{"cookie1": "value1", "cookie2": "value2", "cookie3": "value3"}'
            schema:
              anyOf:
              - additionalProperties: true
                type: object
              - type: 'null'
              title: Cookies
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Set one or more cookies.
      tags:
      - Cookies
  /delay/{seconds}:
    get:
      operationId: delay_delay__seconds__get
      parameters:
      - example: 3
        in: path
        name: seconds
        required: true
        schema:
          title: Seconds
          type: integer
      - in: query
        name: debug
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Debug
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return a delayed response (max of 10 seconds).
      tags:
      - Dynamic Data
  /delete:
    delete:
      operationId: delete_delete_delete
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The request's DELETE parameters.
      tags:
      - HTTP Methods
  /deny:
    get:
      operationId: deny_deny_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Returns a page denied by rules in robots.txt.
      tags:
      - Response Formats
  /encoding/utf8:
    get:
      operationId: utf8_encoding_utf8_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Returns a UTF-8 Encoded body.
      tags:
      - Response Formats
  /etag/{etag}:
    get:
      operationId: etag_etag__etag__get
      parameters:
      - example: test-etag
        in: path
        name: etag
        required: true
        schema:
          title: Etag
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Assumes the resource has the given etag and responds to If-None-Match
        and If-Match headers appropriately.
      tags:
      - Responses
  /favicon.ico:
    get:
      operationId: favicon_favicon_ico_get
      responses:
        '200':
          content:
            image/jpeg: {}
          description: Return a 32x32 favicon in JPG format.
      summary: Favicon endpoint
      tags:
      - Images
  /get:
    get:
      operationId: get_get_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The request's GET parameters.
      tags:
      - HTTP Methods
  /get/args:
    get:
      operationId: get_get_args_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: JUST the request's GET parameters, without extra environment data.
      tags:
      - HTTP Methods
  /headers:
    get:
      operationId: get_headers_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Return the headers sent in the request.
      tags:
      - Request Inspection
  /html:
    get:
      operationId: html_html_get
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: Successful Response
      summary: Returns an HTML document.
      tags:
      - Response Formats
  /images/heic:
    get:
      operationId: get_images_heic_get
      responses:
        '200':
          content:
            image/heic: {}
          description: Return an image in HEIC format.
      summary: Returns a HEIC image. (This may not be displayed correctly in some
        browsers)
      tags:
      - Images
  /images/jpeg:
    get:
      operationId: get_images_jpeg_get
      responses:
        '200':
          content:
            image/jpeg: {}
          description: Return an image in JPG format.
      summary: Returns a JPEG image.
      tags:
      - Images
  /images/png:
    get:
      operationId: get_images_png_get
      responses:
        '200':
          content:
            image/png: {}
          description: Return an image in PNG format.
      summary: Returns a PNG image.
      tags:
      - Images
  /images/webp:
    get:
      operationId: get_images_webp_get
      responses:
        '200':
          content:
            image/webp: {}
          description: Return an image in Webp format.
      summary: Returns a Webp image.
      tags:
      - Images
  /ip:
    get:
      operationId: ip_ip_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Return the user's IP address.
      tags:
      - Request Inspection
  /ip/v4:
    get:
      operationId: ipv4_ip_v4_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Return the user's IPv4 address, if present.
        '422':
          description: Returned if user came in over IPv6
      summary: Return the user's IPv4 address (if present).
      tags:
      - Request Inspection
  /ip/v6:
    get:
      operationId: ipv6_ip_v6_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Return the user's IPv6 address, if present.
        '422':
          description: Returned if user came in over IPv4
      summary: Return the user's IPv6 address (if present).
      tags:
      - Request Inspection
  /json:
    get:
      operationId: json_json_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Returns a JSON document.
      tags:
      - Response Formats
  /openapi.yaml:
    get:
      operationId: openapi_yaml_openapi_yaml_get
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Return OpenAPI specification in YAML format.
      summary: OpenAPI spec in YAML format
      tags:
      - Meta
  /patch:
    patch:
      operationId: patch_patch_patch
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The request's PATCH parameters. (Use -d in curl to specify data in
        JSON format)
      tags:
      - HTTP Methods
  /post:
    post:
      operationId: post_post_post
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The request's POST parameters. (Use -d in curl to specify data in JSON
        format)
      tags:
      - HTTP Methods
  /put:
    put:
      operationId: put_put_put
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The request's PUT parameters. (Use -d in curl to specify data in JSON
        format)
      tags:
      - HTTP Methods
  /qrcode/form:
    post:
      operationId: qrcode_post_form_qrcode_form_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_qrcode_post_form_qrcode_form_post'
        required: true
      responses:
        '200':
          content:
            image/png: {}
          description: Return a QR Code in PNG format.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Returns a QR Code in PNG format from form submission.
      tags:
      - QR Codes
  /qrcode/json:
    post:
      operationId: qrcode_post_qrcode_json_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QRCode'
        required: true
      responses:
        '200':
          content:
            image/png: {}
          description: Return a QR Code in PNG format.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Returns a QR code in PNG format from POSTed JSON.
      tags:
      - QR Codes
  /redirect/{n}:
    delete:
      operationId: delete_redirect__n__delete
      parameters:
      - description: Number of redirects to perform
        example: 3
        in: path
        name: n
        required: true
        schema:
          description: Number of redirects to perform
          title: N
          type: integer
      - description: Status code passed in from a previous redirect
        example: 301
        in: query
        name: code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          default: 302
          description: Status code passed in from a previous redirect
          title: Code
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      tags:
      - Redirects
    get:
      operationId: get_redirect__n__get
      parameters:
      - description: Number of redirects to perform
        example: 3
        in: path
        name: n
        required: true
        schema:
          description: Number of redirects to perform
          title: N
          type: integer
      - description: Status code passed in from a previous redirect
        example: 301
        in: query
        name: code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          default: 302
          description: Status code passed in from a previous redirect
          title: Code
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      tags:
      - Redirects
    patch:
      operationId: patch_redirect__n__patch
      parameters:
      - description: Number of redirects to perform
        example: 3
        in: path
        name: n
        required: true
        schema:
          description: Number of redirects to perform
          title: N
          type: integer
      - description: Status code passed in from a previous redirect
        example: 301
        in: query
        name: code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          default: 302
          description: Status code passed in from a previous redirect
          title: Code
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      tags:
      - Redirects
    post:
      operationId: post_redirect__n__post
      parameters:
      - description: Number of redirects to perform
        example: 3
        in: path
        name: n
        required: true
        schema:
          description: Number of redirects to perform
          title: N
          type: integer
      - description: Status code passed in from a previous redirect
        example: 301
        in: query
        name: code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          default: 302
          description: Status code passed in from a previous redirect
          title: Code
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      tags:
      - Redirects
    put:
      operationId: put_redirect__n__put
      parameters:
      - description: Number of redirects to perform
        example: 3
        in: path
        name: n
        required: true
        schema:
          description: Number of redirects to perform
          title: N
          type: integer
      - description: Status code passed in from a previous redirect
        example: 301
        in: query
        name: code
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          default: 302
          description: Status code passed in from a previous redirect
          title: Code
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: 302 Redirects n times. (Note that Swagger follows redirects, so use
        the Curl command to see redirect headers.
      tags:
      - Redirects
  /response-headers:
    get:
      operationId: response_headers_get_response_headers_get
      parameters:
      - in: query
        name: headers
        required: false
        schema:
          default: []
          items:
            type: string
          title: Headers
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Set arbitrary headers in the response.  Input strings should be in
        the format of 'header:value'.
      tags:
      - Responses
  /robots.txt:
    get:
      operationId: robots_txt_robots_txt_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Returns some robots.txt rules.
      tags:
      - Response Formats
  /static/logo.png:
    get:
      operationId: logo_static_logo_png_get
      responses:
        '200':
          content:
            image/jpeg: {}
          description: Return the logo.
      summary: Logo endpoint
      tags:
      - Images
  /status/{codes}:
    delete:
      operationId: get_status__codes__delete
      parameters:
      - example: 200,201,204
        in: path
        name: codes
        required: true
        schema:
          minLength: 3
          pattern: ^[0-9,_]+$
          title: Codes
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      tags:
      - Status Codes
    get:
      operationId: get_status__codes__get
      parameters:
      - example: 200,201,204
        in: path
        name: codes
        required: true
        schema:
          minLength: 3
          pattern: ^[0-9,_]+$
          title: Codes
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      tags:
      - Status Codes
    patch:
      operationId: get_status__codes__patch
      parameters:
      - example: 200,201,204
        in: path
        name: codes
        required: true
        schema:
          minLength: 3
          pattern: ^[0-9,_]+$
          title: Codes
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      tags:
      - Status Codes
    post:
      operationId: get_status__codes__post
      parameters:
      - example: 200,201,204
        in: path
        name: codes
        required: true
        schema:
          minLength: 3
          pattern: ^[0-9,_]+$
          title: Codes
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      tags:
      - Status Codes
    put:
      operationId: get_status__codes__put
      parameters:
      - example: 200,201,204
        in: path
        name: codes
        required: true
        schema:
          minLength: 3
          pattern: ^[0-9,_]+$
          title: Codes
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return status code or random one if multiple given as comma-delimited
        list (Underscores are also permitted as delimiters)
      tags:
      - Status Codes
  /stream/chars/complete/{n}/{rate}:
    get:
      operationId: stream_chars_complete_stream_chars_complete__n___rate__get
      parameters:
      - example: 128
        in: path
        name: n
        required: true
        schema:
          title: N
          type: integer
      - example: 50
        in: path
        name: rate
        required: true
        schema:
          title: Rate
          type: integer
      - in: query
        name: debug
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Debug
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Stream n bytes (max 100K) at a rate of rate per second. Any outstanding
        characters due to a low rate will be sent at the very end.  Max time is 10
        seconds.
      tags:
      - Dynamic Data
  /stream/chars/{n}/{rate}:
    get:
      operationId: stream_chars_stream_chars__n___rate__get
      parameters:
      - example: 128
        in: path
        name: n
        required: true
        schema:
          title: N
          type: integer
      - example: 50
        in: path
        name: rate
        required: true
        schema:
          title: Rate
          type: integer
      - in: query
        name: debug
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Debug
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Stream n bytes (max 100K) at a rate of rate per second. Max time is
        20 seconds.
      tags:
      - Dynamic Data
  /stream/{n}:
    get:
      operationId: stream_stream__n__get
      parameters:
      - example: 3
        in: path
        name: n
        required: true
        schema:
          title: N
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Steam n JSON responses.  (max of 100)
      tags:
      - Dynamic Data
  /test-password-manager-form/post:
    post:
      operationId: test_password_manager_form_test_password_manager_form_post_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_test_password_manager_form_test_password_manager_form_post_post'
        required: true
      responses:
        '200':
          description: 'Valid credentials were supplied. (username: dmuth, password:
            password)'
        '401':
          description: Invalid credentials were supplied
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Process a sample login
      tags:
      - Forms
  /user-agent:
    get:
      operationId: user_agent_user_agent_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Request the User Agent.
      tags:
      - Request Inspection
  /uuid:
    get:
      operationId: uuid_uuid_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: Return a type 4 UUID.
      tags:
      - Dynamic Data
      x-kong-plugin-correlation-id:
        config:
          generator: uuid#counter
  /uuid/qrcode:
    get:
      operationId: uuid_qrcode_uuid_qrcode_get
      responses:
        '200':
          content:
            image/png: {}
          description: Return a QR Code in PNG format.
      summary: Return a QR code of a type 4 UUID.
      tags:
      - Dynamic Data
  /uuid/qrcode/{uuid}:
    get:
      operationId: uuid_qrcode_qrcode_uuid_qrcode__uuid__get
      parameters:
      - in: path
        name: uuid
        required: true
        schema:
          title: Uuid
          type: string
      responses:
        '200':
          content:
            image/png: {}
          description: Return a QR Code in PNG format.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Return a QR code of a *specified* type 4 UUID.
      tags:
      - Dynamic Data
  /version:
    get:
      operationId: version_version_get
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Successful Response
      summary: The version of this app.
      tags:
      - Meta
  /xml:
    get:
      operationId: xml_xml_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Returns an XML document
      tags:
      - Response Formats
servers:
- description: Local server
  url: http://host.docker.internal:8080
tags:
- description: Testing different HTTP verbs.
  name: HTTP Methods
- description: Inspect the request data. (including source IP address)
  name: Request Inspection
- description: Inspect response data like caching and headers.
  name: Responses
- description: Returns responses in different formats.
  name: Response Formats
- description: Generate QR Codes.
  name: QR Codes
- description: Generate random and dynamic data.
  name: Dynamic Data
- description: Generate responses with specified status codes.
  name: Status Codes
- description: Return different redirects.
  name: Redirects
- description: Return anything that is passed in on the request.
  name: Anything
- description: Create, read, and delete cookies.
  name: Cookies
- description: Return different image formats.
  name: Images
- description: Endpoints for testing out forms.
  name: Forms
- description: Endpoints related to this app itself.
  name: Meta